--- a/exe/Parser/Text.hs
+++ b/exe/Parser/Text.hs
@@ -318,6 +318,8 @@ genBlocksModule moduleName = done <$> Fo
         , "(Block(..), BlockDefinition(..), block, blockDefinition)"
         , "where"
         , ""
+        , "#include \"MachDeps.h\""
+        , ""
         , "import Data.Ix (Ix)"
         , "import GHC.Exts"
         , ""
@@ -381,9 +383,9 @@ genBlocksModule moduleName = done <$> Fo
         , "    getRawCodePoint# k# ="
         , "#ifdef WORDS_BIGENDIAN"
         , "#if MIN_VERSION_base(4,16,0)"
-        , "        byteSwap32# (word32ToWord# (indexWord32OffAddr# addr# k#))"
+        , "        narrow32Word# (byteSwap32# (word32ToWord# (indexWord32OffAddr# ranges# k#)))"
         , "#else"
-        , "        byteSwap32# (indexWord32OffAddr# ranges# k#)"
+        , "        narrow32Word# (byteSwap32# (indexWord32OffAddr# ranges# k#))"
         , "#endif"
         , "#elif MIN_VERSION_base(4,16,0)"
         , "        word32ToWord# (indexWord32OffAddr# ranges# k#)"
@@ -1279,9 +1281,9 @@ genNamesModule moduleName =
         , "    indexInt32OffAddr'# k# ="
         , "#ifdef WORDS_BIGENDIAN"
         , "#if MIN_VERSION_base(4,16,0)"
-        , "        word2Int# (byteSwap32# (word32ToWord# (indexWord32OffAddr# offsets# k#)))"
+        , "        word2Int# (narrow32Word# (byteSwap32# (word32ToWord# (indexWord32OffAddr# offsets# k#))))"
         , "#else"
-        , "        word2Int# (byteSwap32# (indexWord32OffAddr# offsets# k#))"
+        , "        word2Int# (narrow32Word# (byteSwap32# (indexWord32OffAddr# offsets# k#)))"
         , "#endif"
         , "#elif MIN_VERSION_base(4,16,0)"
         , "        int32ToInt# (indexInt32OffAddr# offsets# k#)"
--- a/lib/Unicode/Internal/Char/Blocks.hs
+++ b/lib/Unicode/Internal/Char/Blocks.hs
@@ -13,6 +13,8 @@ module Unicode.Internal.Char.Blocks
 (Block(..), BlockDefinition(..), block, blockDefinition)
 where
 
+#include "MachDeps.h"
+
 import Data.Ix (Ix)
 import GHC.Exts
 
@@ -715,9 +717,9 @@ block (C# c#) = getBlock 0# 319#
     getRawCodePoint# k# =
 #ifdef WORDS_BIGENDIAN
 #if MIN_VERSION_base(4,16,0)
-        byteSwap32# (word32ToWord# (indexWord32OffAddr# addr# k#))
+        narrow32Word# (byteSwap32# (word32ToWord# (indexWord32OffAddr# ranges# k#)))
 #else
-        byteSwap32# (indexWord32OffAddr# ranges# k#)
+        narrow32Word# (byteSwap32# (indexWord32OffAddr# ranges# k#))
 #endif
 #elif MIN_VERSION_base(4,16,0)
         word32ToWord# (indexWord32OffAddr# ranges# k#)
